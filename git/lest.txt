last 
В Linux команда "last" используется для отображения списка пользователей, 
которые ранее входили в систему. Эта команда особенно полезна системным администраторам, 
которым необходимо отслеживать активность пользователей на сервере. Последняя команда может 
отображать различную информацию, 
включая дату и время доступа, продолжительность сеанса и терминал или устройство, используемое для доступа к системе.


 ssh-keygen.exe
Для генерации SSH-ключа в Linux можно использовать команду ssh-keygen.

В консоли можно использовать не только указанную команду, но и её расширенные версии

cat ~/ssh/id_rsa/pub

git push -u origin master  - изменения в гит

git gc --prune=now очистка кеша в Git
 

Как добавить репозиторий
Сохраненный репозиторий в любой момент можно извлечь и продолжить работу в нем с 
последнего добавленного коммита. Это пригодится, если мы случайно удалим или 
изменим локальный репозиторий так, что с ним станет невозможно работать.

Добавим наш репозиторий на GitHub:

Зарегистрируйтесь на GitHub и создайте ssh-ключи по инструкции. SSH-ключи
 — это наиболее безопасный способ работы с GitHub, поэтому важно разобраться с ними
Создайте репозиторий на GitHub. Назовите его hexlet-git. Важно, ч
тобы репозиторий создавался пустым, поэтому не отмечайте галочки, добавляющие файлы
На странице репозитория вы увидите готовые команды для подключения созданного репозитория на 
GitHub к уже существующему репозиторию у вас на компьютере:

Новый репозиторий на GitHub

Выполните эти шаги:

# Подробнее эти команды мы разберем позже
# Вам нужна ссылка для работы с репозиторием по SSH
git remote add origin git@github.com:<ИМЯ НА ГИТХАБЕ>/hexlet-git.git
git branch -M main
git push -u origin main
Обновите страницу с репозиторием на GitHub. Изучите ее интерфейс и содержимое репозитория. 
Обратите внимание, что директория .git отсутствует. Почему это так, мы узнаем в одном из следующих уроков

После этой команды репозиторий, созданный на github.com, «соединяется» с локальным репозиторием hexlet-git. 
Здесь может возникнуть вопрос: «Почему соединяется? Разве это не один и тот же репозиторий?».

На самом деле, это разные репозитории. Git — это распределенная система контроля версий. Это значит, 
что у Git нет какого-то центрального места, где лежит один главный репозиторий, а разработчики работают с ним со своих компьютеров.

Каждый репозиторий на GitHub и на компьютере у разработчика — это отдельные полноценные репозитории. 
Система Git связывает эти отдельные репозитории, объединяет их общей историей и добавляет возможность обмениваться изменениями:

Процесс работы с GitHub

В примере выше именно команда git push отправляет изменения во вновь созданный репозиторий.

Когда мы выполнили команды выше, локальный и удаленный репозиторий идентичны. Но в процессе работы 
они все время будут расходиться. Поэтому программисты должны не забывать синхронизировать изменения 
— заливать в репозиторий новые коммиты и забирать оттуда коммиты, сделанные другими разработчиками.

Теперь не важно, какие изменения делаются в локальном репозитории. На GitHub все коммиты попадут только 
после команды git push, поэтому не забывайте делать ее. Бывает такое, что разработчик случайно удаляет локальный 
репозиторий, забыв запушить изменения — применить команду git push.

Далее мы попробуем скачать репозиторий с GitHub так, как будто у нас нет локальной копии. Для этого удалите 
директорию проекта hexlet-git с вашего компьютера.

Как клонировать репозиторий
Репозитории на GitHub делятся на публичные и приватные. Публичный репозиторий любой человек может клонировать себе на компьютер. 
После клонирования он начнет работать с ним как с личным.

Единственное ограничение — он не сможет запушить изменения, так как GitHub не дает напрямую менять чужие репозитории.

Клонирование — базовая операция при работе с удаленными репозиториями. Проекты, над которыми работают программисты, 
всегда находятся в системах, подобных GitHub. Для работы с ними нужно клонировать репозиторий к себе на компьютер.

Клонировать репозиторий можно с помощью команды git clone. Полную команду для клонирования можно получить на странице 
репозитория. Для этого нажмите большую кнопку Code, перейдите на вкладку SSH и скопируйте содержимое:

Как получить изменения с GitHub
Разработчики не только отправляют свои изменения на GitHub, но и забирают их оттуда. 
Чаще всего это изменения, сделанные другими разработчиками проекта, но необязательно. 
Бывает такое, что один разработчик работает над одним проектом с разных компьютеров, на каждом из которых своя собственная копия репозитория.

В таком случае, перед началом работы нужно всегда выполнять команду git pull --rebase, которая 
скачивает из внешнего репозитория новые коммиты и добавляет их в локальный репозиторий.

Считается, что достаточно вызывать git pull, но это может приводить к созданию ненужных коммитов, 
из-за которых становится сложнее следить за историей изменений.

Правильная работа с git pull требует знания таких вещей, как ветвление и git rebase. Они довольно 
сложны для новичков, поэтому мы рассмотрим их позже, когда появится хоть какой-то опыт работы с Git.


