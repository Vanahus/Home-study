for ( /*инициализация переменной; условие; изменение значения переменной*/ ) {
  // тело цикла (тут находится код который будет повторяться)
}

#include <stdio.h>
 
int main()
{
    int i;
    /* Цикл будет работать до тех пор, пока i < 10, при этом после каждой итерации переменная i будет инкрементироваться(увеличиваться на 1)*/
    for ( i = 0; i < 10; i++ ) {
        /* Имейте ввиду что условие проверяется перед каждым повторением,
            то есть работа цикла остановится когда переменная i будет равна 10*/  
        printf( "%d\n", i );
    }
    getchar();
}


Цикл while — очень простой цикл, вот его структура:


while ( /*условие*/ )
{
   // тело цикл - тут находится код, который необходимо повторять
}

#include <stdio.h>
 
int main()
{
  int var = 0;  /* обязательно сначала объявляем переменную */
 
  while ( var < 10 ) { /* пока значение переменной var меньше 10 */
      printf( "%d\n", var );
      var++;             /* обновляем значение в переменной var(если этого не делать, то условие цикла всегда будет истинным, тогда цикл будет - бесконечным) */
  }
  getchar();
}


Есть еще один тип циклов — do while. Этот цикл полезен, когда необходимо выполнить код по крайней мере — 1 раз. Рассмотрим его структуру:
do {
   // тело цикла
} while ( /*условие*/ );

#include <stdio.h>
 
int main()
{
  int i = 0;
 
  do {
    /* Напечатает сообщение и завершит работу*/
      printf( "Привет! Я цикл do while\n" );
  } while ( i != 0 );
  getchar();
}

Структура очень простая, как видите условие находится в конце цикла ,соответственно и проверка условия 
будет выполняться после того, как выполнятся код в теле цикла. Обратите внимание, что условие проверяется в 
конце цикла, а не в начале, так что блок кода в теле цикла будет выполнен по крайней мере один раз. 
Если условие истинно, цикл прыгает обратно в начало и снова выполняет его. Цикл do while почти ничем 
не отличается от цикла while, за исключением того, что тело цикла гарантированно выполняется хотя бы один раз. 
Цикл while сначала проверяет условие, а потом выполняет блок кода в теле, конечно же, если условие — истинно, В то время как do while 
сначала выполняет код в теле цикла, а затем проверяет условие, и если оно — истинное, то он продолжает работать. 
Операторы break и continue
Эти два ключевых слова очень важны для циклов, они могут управлять повторениями в цикле. 
Оператор break делает принудительный выход из цикла, даже когда условие цикла — истинно. 
Оператор break удобно использовать, когда необходимо выйти из цикла при особых обстоятельствах. 
Оператор continue нужен если необходимо пропустить какой-то блок кода, но при этом не прекращать работу цикла.